// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/weaver/weaver.proto

package weaver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WeaverService_CreateWorkload_FullMethodName          = "/weaver.WeaverService/CreateWorkload"
	WeaverService_GetWorkload_FullMethodName             = "/weaver.WeaverService/GetWorkload"
	WeaverService_ListWorkloads_FullMethodName           = "/weaver.WeaverService/ListWorkloads"
	WeaverService_DeleteWorkload_FullMethodName          = "/weaver.WeaverService/DeleteWorkload"
	WeaverService_ListProviders_FullMethodName           = "/weaver.WeaverService/ListProviders"
	WeaverService_GetProviderRegions_FullMethodName      = "/weaver.WeaverService/GetProviderRegions"
	WeaverService_GetProviderMachineTypes_FullMethodName = "/weaver.WeaverService/GetProviderMachineTypes"
	WeaverService_GetSchedulerStatus_FullMethodName      = "/weaver.WeaverService/GetSchedulerStatus"
	WeaverService_ScheduleWorkload_FullMethodName        = "/weaver.WeaverService/ScheduleWorkload"
	WeaverService_GetRecommendations_FullMethodName      = "/weaver.WeaverService/GetRecommendations"
	WeaverService_GetSchedulerStats_FullMethodName       = "/weaver.WeaverService/GetSchedulerStats"
	WeaverService_HealthCheck_FullMethodName             = "/weaver.WeaverService/HealthCheck"
)

// WeaverServiceClient is the client API for WeaverService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Weaver service for workload orchestration
type WeaverServiceClient interface {
	// Workload management
	CreateWorkload(ctx context.Context, in *CreateWorkloadRequest, opts ...grpc.CallOption) (*CreateWorkloadResponse, error)
	GetWorkload(ctx context.Context, in *GetWorkloadRequest, opts ...grpc.CallOption) (*GetWorkloadResponse, error)
	ListWorkloads(ctx context.Context, in *ListWorkloadsRequest, opts ...grpc.CallOption) (*ListWorkloadsResponse, error)
	DeleteWorkload(ctx context.Context, in *DeleteWorkloadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Provider management
	ListProviders(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListProvidersResponse, error)
	GetProviderRegions(ctx context.Context, in *GetProviderRegionsRequest, opts ...grpc.CallOption) (*GetProviderRegionsResponse, error)
	GetProviderMachineTypes(ctx context.Context, in *GetProviderMachineTypesRequest, opts ...grpc.CallOption) (*GetProviderMachineTypesResponse, error)
	// Scheduler
	GetSchedulerStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSchedulerStatusResponse, error)
	ScheduleWorkload(ctx context.Context, in *ScheduleWorkloadRequest, opts ...grpc.CallOption) (*ScheduleWorkloadResponse, error)
	GetRecommendations(ctx context.Context, in *GetRecommendationsRequest, opts ...grpc.CallOption) (*GetRecommendationsResponse, error)
	GetSchedulerStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSchedulerStatsResponse, error)
	// Health check
	HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type weaverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWeaverServiceClient(cc grpc.ClientConnInterface) WeaverServiceClient {
	return &weaverServiceClient{cc}
}

func (c *weaverServiceClient) CreateWorkload(ctx context.Context, in *CreateWorkloadRequest, opts ...grpc.CallOption) (*CreateWorkloadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateWorkloadResponse)
	err := c.cc.Invoke(ctx, WeaverService_CreateWorkload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weaverServiceClient) GetWorkload(ctx context.Context, in *GetWorkloadRequest, opts ...grpc.CallOption) (*GetWorkloadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWorkloadResponse)
	err := c.cc.Invoke(ctx, WeaverService_GetWorkload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weaverServiceClient) ListWorkloads(ctx context.Context, in *ListWorkloadsRequest, opts ...grpc.CallOption) (*ListWorkloadsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWorkloadsResponse)
	err := c.cc.Invoke(ctx, WeaverService_ListWorkloads_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weaverServiceClient) DeleteWorkload(ctx context.Context, in *DeleteWorkloadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, WeaverService_DeleteWorkload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weaverServiceClient) ListProviders(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListProvidersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProvidersResponse)
	err := c.cc.Invoke(ctx, WeaverService_ListProviders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weaverServiceClient) GetProviderRegions(ctx context.Context, in *GetProviderRegionsRequest, opts ...grpc.CallOption) (*GetProviderRegionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProviderRegionsResponse)
	err := c.cc.Invoke(ctx, WeaverService_GetProviderRegions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weaverServiceClient) GetProviderMachineTypes(ctx context.Context, in *GetProviderMachineTypesRequest, opts ...grpc.CallOption) (*GetProviderMachineTypesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProviderMachineTypesResponse)
	err := c.cc.Invoke(ctx, WeaverService_GetProviderMachineTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weaverServiceClient) GetSchedulerStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSchedulerStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSchedulerStatusResponse)
	err := c.cc.Invoke(ctx, WeaverService_GetSchedulerStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weaverServiceClient) ScheduleWorkload(ctx context.Context, in *ScheduleWorkloadRequest, opts ...grpc.CallOption) (*ScheduleWorkloadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScheduleWorkloadResponse)
	err := c.cc.Invoke(ctx, WeaverService_ScheduleWorkload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weaverServiceClient) GetRecommendations(ctx context.Context, in *GetRecommendationsRequest, opts ...grpc.CallOption) (*GetRecommendationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecommendationsResponse)
	err := c.cc.Invoke(ctx, WeaverService_GetRecommendations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weaverServiceClient) GetSchedulerStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSchedulerStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSchedulerStatsResponse)
	err := c.cc.Invoke(ctx, WeaverService_GetSchedulerStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weaverServiceClient) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, WeaverService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WeaverServiceServer is the server API for WeaverService service.
// All implementations must embed UnimplementedWeaverServiceServer
// for forward compatibility.
//
// Weaver service for workload orchestration
type WeaverServiceServer interface {
	// Workload management
	CreateWorkload(context.Context, *CreateWorkloadRequest) (*CreateWorkloadResponse, error)
	GetWorkload(context.Context, *GetWorkloadRequest) (*GetWorkloadResponse, error)
	ListWorkloads(context.Context, *ListWorkloadsRequest) (*ListWorkloadsResponse, error)
	DeleteWorkload(context.Context, *DeleteWorkloadRequest) (*emptypb.Empty, error)
	// Provider management
	ListProviders(context.Context, *emptypb.Empty) (*ListProvidersResponse, error)
	GetProviderRegions(context.Context, *GetProviderRegionsRequest) (*GetProviderRegionsResponse, error)
	GetProviderMachineTypes(context.Context, *GetProviderMachineTypesRequest) (*GetProviderMachineTypesResponse, error)
	// Scheduler
	GetSchedulerStatus(context.Context, *emptypb.Empty) (*GetSchedulerStatusResponse, error)
	ScheduleWorkload(context.Context, *ScheduleWorkloadRequest) (*ScheduleWorkloadResponse, error)
	GetRecommendations(context.Context, *GetRecommendationsRequest) (*GetRecommendationsResponse, error)
	GetSchedulerStats(context.Context, *emptypb.Empty) (*GetSchedulerStatsResponse, error)
	// Health check
	HealthCheck(context.Context, *emptypb.Empty) (*HealthCheckResponse, error)
	mustEmbedUnimplementedWeaverServiceServer()
}

// UnimplementedWeaverServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWeaverServiceServer struct{}

func (UnimplementedWeaverServiceServer) CreateWorkload(context.Context, *CreateWorkloadRequest) (*CreateWorkloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkload not implemented")
}
func (UnimplementedWeaverServiceServer) GetWorkload(context.Context, *GetWorkloadRequest) (*GetWorkloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkload not implemented")
}
func (UnimplementedWeaverServiceServer) ListWorkloads(context.Context, *ListWorkloadsRequest) (*ListWorkloadsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkloads not implemented")
}
func (UnimplementedWeaverServiceServer) DeleteWorkload(context.Context, *DeleteWorkloadRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkload not implemented")
}
func (UnimplementedWeaverServiceServer) ListProviders(context.Context, *emptypb.Empty) (*ListProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProviders not implemented")
}
func (UnimplementedWeaverServiceServer) GetProviderRegions(context.Context, *GetProviderRegionsRequest) (*GetProviderRegionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProviderRegions not implemented")
}
func (UnimplementedWeaverServiceServer) GetProviderMachineTypes(context.Context, *GetProviderMachineTypesRequest) (*GetProviderMachineTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProviderMachineTypes not implemented")
}
func (UnimplementedWeaverServiceServer) GetSchedulerStatus(context.Context, *emptypb.Empty) (*GetSchedulerStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchedulerStatus not implemented")
}
func (UnimplementedWeaverServiceServer) ScheduleWorkload(context.Context, *ScheduleWorkloadRequest) (*ScheduleWorkloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleWorkload not implemented")
}
func (UnimplementedWeaverServiceServer) GetRecommendations(context.Context, *GetRecommendationsRequest) (*GetRecommendationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendations not implemented")
}
func (UnimplementedWeaverServiceServer) GetSchedulerStats(context.Context, *emptypb.Empty) (*GetSchedulerStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchedulerStats not implemented")
}
func (UnimplementedWeaverServiceServer) HealthCheck(context.Context, *emptypb.Empty) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedWeaverServiceServer) mustEmbedUnimplementedWeaverServiceServer() {}
func (UnimplementedWeaverServiceServer) testEmbeddedByValue()                       {}

// UnsafeWeaverServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WeaverServiceServer will
// result in compilation errors.
type UnsafeWeaverServiceServer interface {
	mustEmbedUnimplementedWeaverServiceServer()
}

func RegisterWeaverServiceServer(s grpc.ServiceRegistrar, srv WeaverServiceServer) {
	// If the following call pancis, it indicates UnimplementedWeaverServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WeaverService_ServiceDesc, srv)
}

func _WeaverService_CreateWorkload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeaverServiceServer).CreateWorkload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeaverService_CreateWorkload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeaverServiceServer).CreateWorkload(ctx, req.(*CreateWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeaverService_GetWorkload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeaverServiceServer).GetWorkload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeaverService_GetWorkload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeaverServiceServer).GetWorkload(ctx, req.(*GetWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeaverService_ListWorkloads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkloadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeaverServiceServer).ListWorkloads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeaverService_ListWorkloads_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeaverServiceServer).ListWorkloads(ctx, req.(*ListWorkloadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeaverService_DeleteWorkload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeaverServiceServer).DeleteWorkload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeaverService_DeleteWorkload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeaverServiceServer).DeleteWorkload(ctx, req.(*DeleteWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeaverService_ListProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeaverServiceServer).ListProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeaverService_ListProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeaverServiceServer).ListProviders(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeaverService_GetProviderRegions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProviderRegionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeaverServiceServer).GetProviderRegions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeaverService_GetProviderRegions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeaverServiceServer).GetProviderRegions(ctx, req.(*GetProviderRegionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeaverService_GetProviderMachineTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProviderMachineTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeaverServiceServer).GetProviderMachineTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeaverService_GetProviderMachineTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeaverServiceServer).GetProviderMachineTypes(ctx, req.(*GetProviderMachineTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeaverService_GetSchedulerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeaverServiceServer).GetSchedulerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeaverService_GetSchedulerStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeaverServiceServer).GetSchedulerStatus(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeaverService_ScheduleWorkload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeaverServiceServer).ScheduleWorkload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeaverService_ScheduleWorkload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeaverServiceServer).ScheduleWorkload(ctx, req.(*ScheduleWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeaverService_GetRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeaverServiceServer).GetRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeaverService_GetRecommendations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeaverServiceServer).GetRecommendations(ctx, req.(*GetRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeaverService_GetSchedulerStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeaverServiceServer).GetSchedulerStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeaverService_GetSchedulerStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeaverServiceServer).GetSchedulerStats(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeaverService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeaverServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeaverService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeaverServiceServer).HealthCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// WeaverService_ServiceDesc is the grpc.ServiceDesc for WeaverService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WeaverService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "weaver.WeaverService",
	HandlerType: (*WeaverServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWorkload",
			Handler:    _WeaverService_CreateWorkload_Handler,
		},
		{
			MethodName: "GetWorkload",
			Handler:    _WeaverService_GetWorkload_Handler,
		},
		{
			MethodName: "ListWorkloads",
			Handler:    _WeaverService_ListWorkloads_Handler,
		},
		{
			MethodName: "DeleteWorkload",
			Handler:    _WeaverService_DeleteWorkload_Handler,
		},
		{
			MethodName: "ListProviders",
			Handler:    _WeaverService_ListProviders_Handler,
		},
		{
			MethodName: "GetProviderRegions",
			Handler:    _WeaverService_GetProviderRegions_Handler,
		},
		{
			MethodName: "GetProviderMachineTypes",
			Handler:    _WeaverService_GetProviderMachineTypes_Handler,
		},
		{
			MethodName: "GetSchedulerStatus",
			Handler:    _WeaverService_GetSchedulerStatus_Handler,
		},
		{
			MethodName: "ScheduleWorkload",
			Handler:    _WeaverService_ScheduleWorkload_Handler,
		},
		{
			MethodName: "GetRecommendations",
			Handler:    _WeaverService_GetRecommendations_Handler,
		},
		{
			MethodName: "GetSchedulerStats",
			Handler:    _WeaverService_GetSchedulerStats_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _WeaverService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/weaver/weaver.proto",
}
