name: Fabric CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  lint_commit:
    name: Lint Commit Message
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
      - run: npm install -g @commitlint/cli @commitlint/config-conventional commitlint-plugin-regex-match
      - name: Lint Message
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # Use PR title for PRs
            MESSAGE="${{ github.event.pull_request.title }}"
          else
            # Use commit subject for direct pushes
            MESSAGE=$(git log -1 --pretty=%s)
          fi
          echo "$MESSAGE" | npx commitlint

  lint_code:
    name: Lint Go Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24.3
      - name: Cache Go modules & build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('go.work.sum','**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Sync workspace
        run: go work sync
      - name: go fmt
        run: |
          ( cd shuttle && go fmt ./... )
          ( cd weaver && go fmt ./... )
      - name: go vet
        env:
          GOFLAGS: -mod=readonly
        run: go vet ./shuttle/... ./weaver/...
      - name: go mod tidy check
        run: |
          ( cd shuttle && go mod tidy )
          ( cd weaver  && go mod tidy )
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.1
          args: ./shuttle/... ./weaver/... --timeout 5m

  test_unit:
    name: Test ${{ matrix.app }}
    needs: lint_code
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [shuttle, weaver]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24.3
      - name: Cache Go modules & build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Sync workspace
        run: go work sync
      - name: Run tests for ${{ matrix.app }}
        working-directory: ${{ matrix.app }}
        run: go test ./... -v -coverprofile=coverage.out
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.app }}
          path: coverage.out

  build_and_push:
    name: Build & Push ${{ matrix.app }}
    needs: test_unit
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          - app: shuttle
            docker_name: cf-shuttle
          - app: weaver
            docker_name: cf-weaver

    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version info
        id: vars
        run: |
          SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
          PR_NUMBER=${{ github.event.pull_request.number }}

          if [ -z "$PR_NUMBER" ]; then
            # Main branch build - push with short SHA
            echo "tags=ghcr.io/${{ github.repository_owner }}/${{ matrix.docker_name }}:$SHORT_SHA" >> $GITHUB_OUTPUT
            echo "push=true" >> $GITHUB_OUTPUT
          else
            # PR build - use pr-<number> tag that will be overwritten
            echo "tags=ghcr.io/${{ github.repository_owner }}/${{ matrix.docker_name }}:pr-$PR_NUMBER" >> $GITHUB_OUTPUT
            echo "push=true" >> $GITHUB_OUTPUT
          fi

      - name: Build & Push ${{ matrix.app }}
        uses: docker/build-push-action@v4
        with:
          context: .
          file: build/${{ matrix.app }}/Dockerfile
          push: ${{ steps.vars.outputs.push }}
          tags: ${{ steps.vars.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Allow overwriting PR tags
          allow: ${{ github.event_name == 'pull_request' }}

  release:
    name: Release and Tag Images
    needs:
      - test_unit
      - build_and_push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      # Install Docker tools
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install semantic-release & plugins
        run: npm install -g semantic-release@20.1.0 @semantic-release/commit-analyzer @semantic-release/release-notes-generator @semantic-release/changelog @semantic-release/exec @semantic-release/github

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@users.noreply.github.com"

      - name: Run semantic-release
        id: semantic-release
        run: |
          npx semantic-release | tee release.log
          # Capture version from semantic-release output
          VERSION=$(grep "next release version" release.log | awk '{print $NF}')
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
        env:
          GIT_AUTHOR_NAME: GitHub Actions
          GIT_AUTHOR_EMAIL: actions@users.noreply.github.com
          GIT_COMMITTER_NAME: GitHub Actions
          GIT_COMMITTER_EMAIL: actions@users.noreply.github.com

      - name: Tag and Push Versioned Images
        if: env.RELEASE_VERSION != ''
        run: |
          SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)

          for app in shuttle weaver; do
            case $app in
              shuttle)
                docker_name="cf-shuttle"
                ;;
              weaver)
                docker_name="cf-weaver"
                ;;
            esac
            
            # Pull the existing image by short SHA
            docker pull ghcr.io/${{ github.repository_owner }}/$docker_name:$SHORT_SHA
            
            # Tag with semantic version
            docker tag ghcr.io/${{ github.repository_owner }}/$docker_name:$SHORT_SHA ghcr.io/${{ github.repository_owner }}/$docker_name:$RELEASE_VERSION
            
            # Tag as latest
            docker tag ghcr.io/${{ github.repository_owner }}/$docker_name:$SHORT_SHA ghcr.io/${{ github.repository_owner }}/$docker_name:latest
            
            # Push both tags
            docker push ghcr.io/${{ github.repository_owner }}/$docker_name:$RELEASE_VERSION
            docker push ghcr.io/${{ github.repository_owner }}/$docker_name:latest
          done
