name: Fabric CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  # lint:
  #   name: Lint (all modules)
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Set up Go
  #       uses: actions/setup-go@v5
  #       with:
  #         go-version: 1.24.3
  #     - name: Cache Go modules & build
  #       uses: actions/cache@v4
  #       with:
  #         path: |
  #           ~/.cache/go-build
  #           ~/go/pkg/mod
  #         key: ${{ runner.os }}-go-${{ hashFiles('go.work.sum','**/go.sum') }}
  #         restore-keys: |
  #           ${{ runner.os }}-go-
  #     - name: Sync workspace
  #       run: go work sync
  #     - name: go fmt
  #       run: |
  #         ( cd shuttle && go fmt ./... )
  #         ( cd weaver && go fmt ./... )
  #     - name: go vet
  #       env:
  #         GOFLAGS: -mod=readonly
  #       run: go vet ./shuttle/... ./weaver/...
  #     - name: go mod tidy check
  #       run: |
  #         ( cd shuttle && go mod tidy )
  #         ( cd weaver  && go mod tidy )
  #     - name: golangci-lint
  #       uses: golangci/golangci-lint-action@v8
  #       with:
  #         version: v2.1
  #         args: ./shuttle/... ./weaver/... --timeout 5m

  # test:
  #   name: Test ${{ matrix.app }}
  #   needs: lint
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       app: [shuttle, weaver]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Set up Go
  #       uses: actions/setup-go@v5
  #       with:
  #         go-version: 1.24.3
  #     - name: Cache Go modules & build
  #       uses: actions/cache@v4
  #       with:
  #         path: |
  #           ~/.cache/go-build
  #           ~/go/pkg/mod
  #         key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
  #         restore-keys: |
  #           ${{ runner.os }}-go-
  #     - name: Sync workspace
  #       run: go work sync
  #     - name: Run tests for ${{ matrix.app }}
  #       working-directory: ${{ matrix.app }}
  #       run: go test ./... -v -coverprofile=coverage.out
  #     - name: Upload coverage
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: coverage-${{ matrix.app }}
  #         path: coverage.out

  # build-and-push:
  #   name: Build & Push ${{ matrix.app }}
  #   needs: test
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     packages: write
  #   strategy:
  #     matrix:
  #       include:
  #         - app: shuttle
  #           docker_name: cf-shuttle
  #         - app: weaver
  #           docker_name: cf-weaver

  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: docker/setup-qemu-action@v2
  #     - uses: docker/setup-buildx-action@v2
  #     - uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Get short SHA
  #       id: vars
  #       run: echo "short_sha=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_OUTPUT

  #     - name: Build & Push ${{ matrix.app }}
  #       uses: docker/build-push-action@v4
  #       with:
  #         context: .
  #         file: build/${{ matrix.app }}/Dockerfile
  #         push: true
  #         tags: |
  #           ghcr.io/${{ github.repository_owner }}/${{ matrix.docker_name }}:${{ steps.vars.outputs.short_sha }}
  #           ghcr.io/${{ github.repository_owner }}/${{ matrix.docker_name }}:latest
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max

  lint_commit:
    name: Lint commits & MR title
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "18"
      - run: npm install -g @commitlint/cli @commitlint/config-conventional commitlint-plugin-regex-match
      - name: Run commitlint
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            TITLE="${{ github.event.pull_request.title }}"
            # strip leading "Draft: " if present
            TITLE="${TITLE#Draft: }"
            echo "$TITLE" | npx commitlint
          else
            git log -1 --pretty=format:"%s" | npx commitlint
          fi

  calculate_tag:
    name: Calculate next version tag
    needs: lint_commit
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: "18"
      - run: npm install -g semantic-release@20.1.0 @semantic-release/exec @semantic-release/github
      - name: Dry-run semantic-release
        id: dryrun
        run: npx semantic-release --dry-run --no-ci > dry-run.log 2>&1
      - name: Export next version
        run: grep "The next release version is" -m1 dry-run.log > release.env
      - name: Upload version artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-env
          path: release.env

  release_build:
    name: Build and release
    needs: calculate_tag
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Download version artifact
        uses: actions/download-artifact@v4
        with:
          name: release-env
      - uses: actions/setup-node@v3
        with:
          node-version: "18"
      - run: npm install -g semantic-release@20.1.0 @semantic-release/exec @semantic-release/github
      - name: Run semantic-release
        run: npx semantic-release
