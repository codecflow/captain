name: Fabric CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  lint_commit:
    name: Lint Commit Message
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
      - run: npm install -g @commitlint/cli @commitlint/config-conventional commitlint-plugin-regex-match
      - name: Lint PR title
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          echo "$PR_TITLE" | npx commitlint

  lint_code:
    name: Lint Go Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24.3
      - name: Cache Go modules & build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('go.work.sum','**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Sync workspace
        run: go work sync
      - name: go fmt
        run: |
          ( cd shuttle && go fmt ./... )
          ( cd weaver && go fmt ./... )
      - name: go vet
        env:
          GOFLAGS: -mod=readonly
        run: go vet ./shuttle/... ./weaver/...
      - name: go mod tidy check
        run: |
          ( cd shuttle && go mod tidy )
          ( cd weaver  && go mod tidy )
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.1
          args: ./shuttle/... ./weaver/... --timeout 5m

  test_unit:
    name: Test ${{ matrix.app }}
    needs: lint_code
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [shuttle, weaver]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24.3
      - name: Cache Go modules & build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Sync workspace
        run: go work sync
      - name: Run tests for ${{ matrix.app }}
        working-directory: ${{ matrix.app }}
        run: go test ./... -v -coverprofile=coverage.out
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.app }}
          path: coverage.out

  build-and-push:
    name: Build & Push ${{ matrix.app }}
    needs: test_unit
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          - app: shuttle
            docker_name: cf-shuttle
          - app: weaver
            docker_name: cf-weaver

    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get short SHA
        id: vars
        run: echo "short_sha=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Build & Push ${{ matrix.app }}
        uses: docker/build-push-action@v4
        with:
          context: .
          file: build/${{ matrix.app }}/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ matrix.docker_name }}:${{ steps.vars.outputs.short_sha }}
            ${{ github.event_name == 'push' && format('ghcr.io/{0}/{1}:latest', github.repository_owner, matrix.docker_name) || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release:
    name: Release
    needs:
      - test_unit
      - build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
      - name: Install semantic-release & plugins
        run: npm install -g semantic-release@20.1.0 @semantic-release/commit-analyzer @semantic-release/release-notes-generator @semantic-release/changelog @semantic-release/exec @semantic-release/git @semantic-release/github
      - name: Run semantic-release
        run: npx semantic-release
